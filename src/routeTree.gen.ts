/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as EditTemplateImport } from './routes/_editTemplate'
import { Route as PresentationIndexImport } from './routes/presentation/index'
import { Route as PresentationPageNumImport } from './routes/presentation/$pageNum'

// Create Virtual Routes

const IndexLazyImport = createFileRoute('/')()
const EditTemplateEditIndexLazyImport = createFileRoute(
  '/_editTemplate/edit/',
)()

// Create/Update Routes

const EditTemplateRoute = EditTemplateImport.update({
  id: '/_editTemplate',
  getParentRoute: () => rootRoute,
} as any)

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const PresentationIndexRoute = PresentationIndexImport.update({
  id: '/presentation/',
  path: '/presentation/',
  getParentRoute: () => rootRoute,
} as any)

const PresentationPageNumRoute = PresentationPageNumImport.update({
  id: '/presentation/$pageNum',
  path: '/presentation/$pageNum',
  getParentRoute: () => rootRoute,
} as any)

const EditTemplateEditIndexLazyRoute = EditTemplateEditIndexLazyImport.update({
  id: '/edit/',
  path: '/edit/',
  getParentRoute: () => EditTemplateRoute,
} as any).lazy(() =>
  import('./routes/_editTemplate/edit/index.lazy').then((d) => d.Route),
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/_editTemplate': {
      id: '/_editTemplate'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof EditTemplateImport
      parentRoute: typeof rootRoute
    }
    '/presentation/$pageNum': {
      id: '/presentation/$pageNum'
      path: '/presentation/$pageNum'
      fullPath: '/presentation/$pageNum'
      preLoaderRoute: typeof PresentationPageNumImport
      parentRoute: typeof rootRoute
    }
    '/presentation/': {
      id: '/presentation/'
      path: '/presentation'
      fullPath: '/presentation'
      preLoaderRoute: typeof PresentationIndexImport
      parentRoute: typeof rootRoute
    }
    '/_editTemplate/edit/': {
      id: '/_editTemplate/edit/'
      path: '/edit'
      fullPath: '/edit'
      preLoaderRoute: typeof EditTemplateEditIndexLazyImport
      parentRoute: typeof EditTemplateImport
    }
  }
}

// Create and export the route tree

interface EditTemplateRouteChildren {
  EditTemplateEditIndexLazyRoute: typeof EditTemplateEditIndexLazyRoute
}

const EditTemplateRouteChildren: EditTemplateRouteChildren = {
  EditTemplateEditIndexLazyRoute: EditTemplateEditIndexLazyRoute,
}

const EditTemplateRouteWithChildren = EditTemplateRoute._addFileChildren(
  EditTemplateRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '': typeof EditTemplateRouteWithChildren
  '/presentation/$pageNum': typeof PresentationPageNumRoute
  '/presentation': typeof PresentationIndexRoute
  '/edit': typeof EditTemplateEditIndexLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '': typeof EditTemplateRouteWithChildren
  '/presentation/$pageNum': typeof PresentationPageNumRoute
  '/presentation': typeof PresentationIndexRoute
  '/edit': typeof EditTemplateEditIndexLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/_editTemplate': typeof EditTemplateRouteWithChildren
  '/presentation/$pageNum': typeof PresentationPageNumRoute
  '/presentation/': typeof PresentationIndexRoute
  '/_editTemplate/edit/': typeof EditTemplateEditIndexLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '' | '/presentation/$pageNum' | '/presentation' | '/edit'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '' | '/presentation/$pageNum' | '/presentation' | '/edit'
  id:
    | '__root__'
    | '/'
    | '/_editTemplate'
    | '/presentation/$pageNum'
    | '/presentation/'
    | '/_editTemplate/edit/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  EditTemplateRoute: typeof EditTemplateRouteWithChildren
  PresentationPageNumRoute: typeof PresentationPageNumRoute
  PresentationIndexRoute: typeof PresentationIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  EditTemplateRoute: EditTemplateRouteWithChildren,
  PresentationPageNumRoute: PresentationPageNumRoute,
  PresentationIndexRoute: PresentationIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_editTemplate",
        "/presentation/$pageNum",
        "/presentation/"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/_editTemplate": {
      "filePath": "_editTemplate.tsx",
      "children": [
        "/_editTemplate/edit/"
      ]
    },
    "/presentation/$pageNum": {
      "filePath": "presentation/$pageNum.tsx"
    },
    "/presentation/": {
      "filePath": "presentation/index.tsx"
    },
    "/_editTemplate/edit/": {
      "filePath": "_editTemplate/edit/index.lazy.tsx",
      "parent": "/_editTemplate"
    }
  }
}
ROUTE_MANIFEST_END */
